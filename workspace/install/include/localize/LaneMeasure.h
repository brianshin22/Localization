// Generated by gencpp from file localize/LaneMeasure.msg
// DO NOT EDIT!


#ifndef LOCALIZE_MESSAGE_LANEMEASURE_H
#define LOCALIZE_MESSAGE_LANEMEASURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace localize
{
template <class ContainerAllocator>
struct LaneMeasure_
{
  typedef LaneMeasure_<ContainerAllocator> Type;

  LaneMeasure_()
    : a0(0.0)
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)
    , quality(0)  {
    }
  LaneMeasure_(const ContainerAllocator& _alloc)
    : a0(0.0)
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)
    , quality(0)  {
    }



   typedef double _a0_type;
  _a0_type a0;

   typedef double _a1_type;
  _a1_type a1;

   typedef double _a2_type;
  _a2_type a2;

   typedef double _a3_type;
  _a3_type a3;

   typedef int32_t _quality_type;
  _quality_type quality;




  typedef boost::shared_ptr< ::localize::LaneMeasure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localize::LaneMeasure_<ContainerAllocator> const> ConstPtr;

}; // struct LaneMeasure_

typedef ::localize::LaneMeasure_<std::allocator<void> > LaneMeasure;

typedef boost::shared_ptr< ::localize::LaneMeasure > LaneMeasurePtr;
typedef boost::shared_ptr< ::localize::LaneMeasure const> LaneMeasureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localize::LaneMeasure_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localize::LaneMeasure_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace localize

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'localize': ['/home/mpc/Localization/workspace/src/localize/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::localize::LaneMeasure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localize::LaneMeasure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localize::LaneMeasure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localize::LaneMeasure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localize::LaneMeasure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localize::LaneMeasure_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localize::LaneMeasure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c83232960a83d0a1fdaef90d75536fce";
  }

  static const char* value(const ::localize::LaneMeasure_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc83232960a83d0a1ULL;
  static const uint64_t static_value2 = 0xfdaef90d75536fceULL;
};

template<class ContainerAllocator>
struct DataType< ::localize::LaneMeasure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localize/LaneMeasure";
  }

  static const char* value(const ::localize::LaneMeasure_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localize::LaneMeasure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 a0\n\
float64 a1\n\
float64 a2\n\
float64 a3\n\
int32 quality\n\
\n\
";
  }

  static const char* value(const ::localize::LaneMeasure_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localize::LaneMeasure_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a0);
      stream.next(m.a1);
      stream.next(m.a2);
      stream.next(m.a3);
      stream.next(m.quality);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LaneMeasure_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localize::LaneMeasure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localize::LaneMeasure_<ContainerAllocator>& v)
  {
    s << indent << "a0: ";
    Printer<double>::stream(s, indent + "  ", v.a0);
    s << indent << "a1: ";
    Printer<double>::stream(s, indent + "  ", v.a1);
    s << indent << "a2: ";
    Printer<double>::stream(s, indent + "  ", v.a2);
    s << indent << "a3: ";
    Printer<double>::stream(s, indent + "  ", v.a3);
    s << indent << "quality: ";
    Printer<int32_t>::stream(s, indent + "  ", v.quality);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZE_MESSAGE_LANEMEASURE_H
